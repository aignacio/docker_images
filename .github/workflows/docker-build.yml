name: Build and Push All Docker Images

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Specific Dockerfile to build (leave empty for all)'
        required: false
        default: ''

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: aignacio

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        dockerfile: [rtldev, chisel, yosys, synlig, mpsocsw, nox, axidma, icarus, gh_runner]
        include:
          - dockerfile: rtldev
            image_name: rtldev
            description: "RTL Development Environment with Verilator, Slang, SV2V, and Verible"
          - dockerfile: chisel
            image_name: chisel
            description: "Chisel Hardware Design Language Environment"
          - dockerfile: yosys
            image_name: yosys
            description: "Yosys Open SYnthesis Suite"
          - dockerfile: synlig
            image_name: synlig
            description: "Synlig Synthesis Tool Environment"
          - dockerfile: mpsocsw
            image_name: mpsocsw
            description: "MPSoC Software Development Environment"
          - dockerfile: nox
            image_name: nox
            description: "Nox Development Environment"
          - dockerfile: axidma
            image_name: axidma
            description: "AXI DMA Development Environment"
          - dockerfile: icarus
            image_name: icarus
            description: "Icarus Verilog Environment"
          - dockerfile: gh_runner
            image_name: gh_runner
            description: "GitHub Runner Environment"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=${{ matrix.image_name }}
          org.opencontainers.image.description=${{ matrix.description }}
          org.opencontainers.image.vendor=Anderson Ignacio da Silva
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false

    - name: Show image info
      if: github.event_name != 'pull_request'
      run: |
        echo "‚úÖ Successfully built and pushed: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}"
        echo "üìã Tags: ${{ steps.meta.outputs.tags }}"
        echo "üè∑Ô∏è  Labels: ${{ steps.meta.outputs.labels }}" 