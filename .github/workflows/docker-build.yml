name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images (ignore changes)'
        required: false
        default: false
        type: boolean

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_BUILDKIT: 1

jobs:
  discover-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.discover.outputs.dockerfiles }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Discover Dockerfiles
        id: discover
        run: |
          # Find all Dockerfiles and create JSON array
          dockerfiles=$(find . -name "Dockerfile*" -type f | jq -R -s -c 'split("\n")[:-1]')
          echo "dockerfiles=$dockerfiles" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles: $dockerfiles"

  build-and-push:
    needs: discover-dockerfiles
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.discover-dockerfiles.outputs.dockerfiles) }}
        platform: [linux/amd64, linux/arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
          buildkitd-flags: --allow-insecure-entitlement security.insecure
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Check if Dockerfile has changed
        id: check-changes
        run: |
          echo "Checking changes for: ${{ matrix.dockerfile }}"
          echo "Event type: ${{ github.event_name }}"
          
          # Check if force rebuild is requested
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Force rebuild requested, will build"
            exit 0
          fi
          
          # Get the list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, compare with base branch
            echo "Comparing with base branch: ${{ github.base_ref }}"
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # For pushes, compare with previous commit
            echo "Comparing with previous commit"
            changed_files=$(git diff --name-only HEAD~1...HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Check if the current Dockerfile is in the changed files
          if echo "$changed_files" | grep -q "${{ matrix.dockerfile }}"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Dockerfile ${{ matrix.dockerfile }} has changed, will build"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️ Dockerfile ${{ matrix.dockerfile }} has not changed, skipping build"
          fi
      
      - name: Extract image name from Dockerfile path
        id: image-name
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          # Remove ./ prefix and Dockerfile suffix, replace dots with dashes
          name=$(echo "${{ matrix.dockerfile }}" | sed 's|^\./||' | sed 's|Dockerfile\.||' | sed 's|\.|-|g')
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "Image name: $name"
      
      - name: Build and push
        if: steps.check-changes.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ steps.image-name.outputs.name }}:${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 